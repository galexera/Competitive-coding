Merge Sort follows the rule of Divide and Conquer to sort a given set of numbers/elements, recursively, hence consuming less time.


For merge sort remember 4 steps
1) calculate mid -> populate left and right array wrt mid element
2) recursively sort left array
3) recursively sort right array
4) merge left and right array
Worst Case Time Complexity [ Big-O ]: O(n*log n)

Best Case Time Complexity [Big-omega]: O(n*log n)

Average Time Complexity [Big-theta]: O(n*log n)

Space Complexity: O(n)
It is the best Sorting technique used for sorting Linked Lists.


 Implementation : 
 class mergesort {
	
    public static void ms(int[] arr)
    {
        if(arr.length <2)
        {return ;}
        int mid  = arr.length/2;
        int[] left = new int[mid];
        int[] right = new int[arr.length-mid];
        for(int i=0;i<mid;i++)
        {
            left[i] = arr[i];
        }
        for(int i=mid,j=0;i<arr.length;i++,j++)
        {
            right[j] = arr[i];
        }
        ms(left);
        ms(right);
        merge(arr,left,right);
    }
    public static void merge(int[] arr, int[] left, int[] right)
    {
        int i=0 ,j=0,k=0;
        while(i<left.length && j<right.length)
        {
            if(left[i]<right[j])
            {
                arr[k] = left[i];
                i++;
            }else{
                arr[k]= right[j];
                j++;
            }
            k++;
        }
        while(j<right.length)
        {
            arr[k] = right[j];
            j++;
            k++;
        }
         while(i<left.length)
        {
            arr[k] = left[i];
            i++;
            k++;
        }
    }
    public static void main(String[] args){

        int[] arr = {1,3,5,4,9,6,7};
        ms(arr);
        for(int x : arr)
        {
            System.out.println(x);
        }
        
        
    }
}